dMax<-0
dMin<-Inf
for (i in seq_len(n)) {
for (j in seq(from=i,to=n)) {
dPom<-sqrt(sum((X[i,]-X[j,])^2))
if (dPom>0) {
if (dPom>dMax) {
dMax<-dPom
}
if (dPom<dMin) {
dMin<-dPom
}
}
}
}----------------------------------------------------------------------------------------------
#exp & min --------------------------------------------------------------------------------------
if (ker=='exp' & typ=='min') {
colnames(meze)<-paste('meze',ker,typ)
#horní meze
N<-1
meze[N,1]<-dMin*(1/eps/factorial(N))^(1/(N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
while(dMin*(1/eps/factorial(N))^(1/(N))>dMax) {
meze[N,1]<-dMin*(1/eps/factorial(N))^(1/(N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
}
#dMax
meze[N,1]<-dMax
row.names(meze)[N]<-'bMax'
N<-N+1
#dMin
meze[N,1]<-dMin
row.names(meze)[N]<-'bMin'
N<-N+1
#bMul
meze[N,1]<-(dMin+dMax)/(-2*log(eps))
row.names(meze)[N]<-'bMul'
N<-N+1
}------------------------------------------------------------------------------------------------
#exp & max --------------------------------------------------------------------------------------
if (ker=='exp' & typ=='max') {
colnames(meze)<-paste('meze',ker,typ)
#horní meze
N<-1
meze[N,1]<-dMax*(1/eps/factorial(N))^(1/(N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
while(dMax*(1/eps/factorial(N))^(1/(N))>dMax) {
meze[N,1]<-dMax*(1/eps/factorial(N))^(1/(N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
}
#dMax
meze[N,1]<-dMax
row.names(meze)[N]<-'bMax'
N<-N+1
#dMin
meze[N,1]<-dMin
row.names(meze)[N]<-'bMin'
N<-N+1
#bMul
meze[N,1]<-(dMin+dMax)/(-2*log(eps))
row.names(meze)[N]<-'bMul'
N<-N+1
}------------------------------------------------------------------------------------------------
#gauss & min ------------------------------------------------------------------------------------
if (ker=='gauss' & typ=='min') {
}------------------------------------------------------------------------------------------------
#gauss & max ------------------------------------------------------------------------------------
if (ker=='gauss' & typ=='max') {
}------------------------------------------------------------------------------------------------
return(meze)
}
mezeSVM(X,ker='exp',typ='max')
n<-dim(X)[1]
eps<-.Machine$double.eps
meze<-data.frame(0)
colnames(meze)<-'meze'
ker='exp'
typ='min'
dMax<-0
dMin<-Inf
for (i in seq_len(n)) {
for (j in seq(from=i,to=n)) {
dPom<-sqrt(sum((X[i,]-X[j,])^2))
if (dPom>0) {
if (dPom>dMax) {
dMax<-dPom
}
if (dPom<dMin) {
dMin<-dPom
}
}
}
}
if (ker=='exp' & typ=='min') {
colnames(meze)<-paste('meze',ker,typ)
#horní meze
N<-1
meze[N,1]<-dMin*(1/eps/factorial(N))^(1/(N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
while(dMin*(1/eps/factorial(N))^(1/(N))>dMax) {
meze[N,1]<-dMin*(1/eps/factorial(N))^(1/(N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
}
#dMax
meze[N,1]<-dMax
row.names(meze)[N]<-'bMax'
N<-N+1
#dMin
meze[N,1]<-dMin
row.names(meze)[N]<-'bMin'
N<-N+1
#bMul
meze[N,1]<-(dMin+dMax)/(-2*log(eps))
row.names(meze)[N]<-'bMul'
N<-N+1
}
meze
if (ker=='exp' & typ=='max') {
colnames(meze)<-paste('meze',ker,typ)
#horní meze
N<-1
meze[N,1]<-dMax*(1/eps/factorial(N))^(1/(N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
while(dMax*(1/eps/factorial(N))^(1/(N))>dMax) {
meze[N,1]<-dMax*(1/eps/factorial(N))^(1/(N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
}
#dMax
meze[N,1]<-dMax
row.names(meze)[N]<-'bMax'
N<-N+1
#dMin
meze[N,1]<-dMin
row.names(meze)[N]<-'bMin'
N<-N+1
#bMul
meze[N,1]<-(dMin+dMax)/(-2*log(eps))
row.names(meze)[N]<-'bMul'
N<-N+1
}
mezeSVM(X,ker='exp',typ='max')
#norma je jako z definice, tedy ODMOCNĚNÁ
#ker - 'exp', 'gauss'
#typ    - 'min', 'max'
#testy - shoda s tím z Matlabu:
#  - dMin a dMax stejné
#  -                                  | exp & min | exp & max | gauss & min | gauss & max
#  - spráně oříznuté horni dle dMax   |     x     |
#mezeSVM(X,ker='exp',typ='max')
mezeSVM <- function(X, ker, typ){
#řídící proměnné
n<-dim(X)[1]
eps<-.Machine$double.eps
meze<-data.frame(0)
colnames(meze)<-'meze'
#určení max a min vzdálenosti--------------------------------------------------------------------
dMax<-0
dMin<-Inf
for (i in seq_len(n)) {
for (j in seq(from=i,to=n)) {
dPom<-sqrt(sum((X[i,]-X[j,])^2))
if (dPom>0) {
if (dPom>dMax) {
dMax<-dPom
}
if (dPom<dMin) {
dMin<-dPom
}
}
}
}#---------------------------------------------------------------------------------------------
#exp & min --------------------------------------------------------------------------------------
if (ker=='exp' & typ=='min') {
colnames(meze)<-paste('meze',ker,typ)
#horní meze
N<-1
meze[N,1]<-dMin*(1/eps/factorial(N))^(1/(N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
while(dMin*(1/eps/factorial(N))^(1/(N))>dMax) {
meze[N,1]<-dMin*(1/eps/factorial(N))^(1/(N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
}
#dMax
meze[N,1]<-dMax
row.names(meze)[N]<-'bMax'
N<-N+1
#dMin
meze[N,1]<-dMin
row.names(meze)[N]<-'bMin'
N<-N+1
#bMul
meze[N,1]<-(dMin+dMax)/(-2*log(eps))
row.names(meze)[N]<-'bMul'
N<-N+1
}#-----------------------------------------------------------------------------------------------
#exp & max --------------------------------------------------------------------------------------
if (ker=='exp' & typ=='max') {
colnames(meze)<-paste('meze',ker,typ)
#horní meze
N<-1
meze[N,1]<-dMax*(1/eps/factorial(N))^(1/(N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
while(dMax*(1/eps/factorial(N))^(1/(N))>dMax) {
meze[N,1]<-dMax*(1/eps/factorial(N))^(1/(N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
}
#dMax
meze[N,1]<-dMax
row.names(meze)[N]<-'bMax'
N<-N+1
#dMin
meze[N,1]<-dMin
row.names(meze)[N]<-'bMin'
N<-N+1
#bMul
meze[N,1]<-(dMin+dMax)/(-2*log(eps))
row.names(meze)[N]<-'bMul'
N<-N+1
}#-----------------------------------------------------------------------------------------------
#gauss & min ------------------------------------------------------------------------------------
if (ker=='gauss' & typ=='min') {
}#-----------------------------------------------------------------------------------------------
#gauss & max ------------------------------------------------------------------------------------
if (ker=='gauss' & typ=='max') {
}#-----------------------------------------------------------------------------------------------
return(meze)
}
mezeSVM(X,ker='exp',typ='max')
#norma je jako z definice, tedy ODMOCNĚNÁ
#ker - 'exp', 'gauss'
#typ    - 'min', 'max'
#testy - shoda s tím z Matlabu:
#  - dMin a dMax stejné
#  -                                  | exp & min | exp & max | gauss & min | gauss & max
#  - spráně oříznuté horni dle dMax   |     x     |
#mezeSVM(X,ker='exp',typ='max')
mezeSVM <- function(X, ker, typ){
#řídící proměnné
n<-dim(X)[1]
eps<-.Machine$double.eps
meze<-data.frame(0)
colnames(meze)<-'meze'
#určení max a min vzdálenosti--------------------------------------------------------------------
dMax<-0
dMin<-Inf
for (i in seq_len(n)) {
for (j in seq(from=i,to=n)) {
dPom<-sqrt(sum((X[i,]-X[j,])^2))
if (dPom>0) {
if (dPom>dMax) {
dMax<-dPom
}
if (dPom<dMin) {
dMin<-dPom
}
}
}
}#---------------------------------------------------------------------------------------------
#exp & min --------------------------------------------------------------------------------------
if (ker=='exp' & typ=='min') {
colnames(meze)<-paste('meze',ker,typ)
#horní meze
N<-1
meze[N,1]<-dMin*(1/eps/factorial(N))^(1/(N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
while(dMin*(1/eps/factorial(N))^(1/(N))>dMax) {
meze[N,1]<-dMin*(1/eps/factorial(N))^(1/(N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
}
#dMax
meze[N,1]<-dMax
row.names(meze)[N]<-'bMax'
N<-N+1
#dMin
meze[N,1]<-dMin
row.names(meze)[N]<-'bMin'
N<-N+1
#bMul
meze[N,1]<-(dMin+dMax)/(-log(eps))
row.names(meze)[N]<-'bMul'
N<-N+1
}#-----------------------------------------------------------------------------------------------
#exp & max --------------------------------------------------------------------------------------
if (ker=='exp' & typ=='max') {
colnames(meze)<-paste('meze',ker,typ)
#horní meze
N<-1
meze[N,1]<-dMax*(1/eps/factorial(N))^(1/(N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
while(dMax*(1/eps/factorial(N))^(1/(N))>dMax) {
meze[N,1]<-dMax*(1/eps/factorial(N))^(1/(N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
}
#dMax
meze[N,1]<-dMax
row.names(meze)[N]<-'bMax'
N<-N+1
#dMin
meze[N,1]<-dMin
row.names(meze)[N]<-'bMin'
N<-N+1
#bMul
meze[N,1]<-(dMin+dMax)/(-log(eps))
row.names(meze)[N]<-'bMul'
N<-N+1
}#-----------------------------------------------------------------------------------------------
#gauss & min ------------------------------------------------------------------------------------
if (ker=='gauss' & typ=='min') {
colnames(meze)<-paste('meze',ker,typ)
#horní meze
N<-1
meze[N,1]<-dMin/sqrt(2)*(1/eps/factorial(N))^(1/(2*N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
while(dMin/sqrt(2)*(1/eps/factorial(N))^(1/(2*N))>dMax/sqrt(2)) {
meze[N,1]<-dMin/sqrt(2)*(1/eps/factorial(N))^(1/(2*N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
}
#dMax
meze[N,1]<-dMax/sqrt(2)
row.names(meze)[N]<-'bMax'
N<-N+1
#dMin
meze[N,1]<-dMin/sqrt(2)
row.names(meze)[N]<-'bMin'
N<-N+1
#bMul
meze[N,1]<-sqrt((dMin^2+dMax^2)/(-2*log(eps)))
row.names(meze)[N]<-'bMul'
N<-N+1
}#-----------------------------------------------------------------------------------------------
#gauss & max ------------------------------------------------------------------------------------
if (ker=='gauss' & typ=='max') {
colnames(meze)<-paste('meze',ker,typ)
#horní meze
N<-1
meze[N,1]<-dMax/sqrt(2)*(1/eps/factorial(N))^(1/(2*N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
while(dMax/sqrt(2)*(1/eps/factorial(N))^(1/(2*N))>dMax/sqrt(2)) {
meze[N,1]<-dMax/sqrt(2)*(1/eps/factorial(N))^(1/(2*N))
row.names(meze)[N]<-paste('horni',N)
N<-N+1
}
#dMax
meze[N,1]<-dMax/sqrt(2)
row.names(meze)[N]<-'bMax'
N<-N+1
#dMin
meze[N,1]<-dMin/sqrt(2)
row.names(meze)[N]<-'bMin'
N<-N+1
#bMul
meze[N,1]<-sqrt((dMin^2+dMax^2)/(-2*log(eps)))
row.names(meze)[N]<-'bMul'
N<-N+1
}#-----------------------------------------------------------------------------------------------
return(meze)
}
mezeSVM(X,ker='gauss',typ='min')
mezeSVM(X,ker='gauss',typ='max')
install.packages("cluster")
setwd("~/GitHub/-KW-/Clustering")
identical(d2[[c(1,1)]],
data(votes.repub)
agn1 <- agnes(votes.repub, metric = "manhattan", stand = TRUE)
agn1
plot(agn1)
op <- par(mfrow=c(2,2))
agn2 <- agnes(daisy(votes.repub), diss = TRUE, method = "complete")
plot(agn2)
## alpha = 0.625 ==> beta = -1/4 is "recommended" by some
agnS <- agnes(votes.repub, method = "flexible", par.meth = 0.625)
plot(agnS)
par(op)
## "show" equivalence of three "flexible" special cases
d.vr <- daisy(votes.repub)
a.wgt <- agnes(d.vr, method = "weighted")
a.sing <- agnes(d.vr, method = "single")
a.comp <- agnes(d.vr, method = "complete")
iC <- -(6:7) # not using 'call' and 'method' for comparisons
stopifnot(
all.equal(a.wgt [iC], agnes(d.vr, method="flexible", par.method = 0.5)[iC]) ,
all.equal(a.sing[iC], agnes(d.vr, method="flex", par.method= c(.5,.5,0, -.5))[iC]),
all.equal(a.comp[iC], agnes(d.vr, method="flex", par.method= c(.5,.5,0, +.5))[iC]))
## Exploring the dendrogram structure
(d2 <- as.dendrogram(agn2)) # two main branches
d2[[1]] # the first branch
d2[[2]] # the 2nd one { 8 + 42 = 50 }
d2[[1]][[1]]# first sub-branch of branch 1 .. and shorter form
identical(d2[[c(1,1)]],
d2[[1]][[1]])
## a "textual picture" of the dendrogram :
agnes.object 7
str(d2)
data(agriculture)
## Plot similar to Figure 7 in ref
## Not run: plot(agnes(agriculture), ask = TRUE)
data(animals)
aa.a <- agnes(animals) # default method = "average"
aa.ga <- agnes(animals, method = "gaverage")
op <- par(mfcol=1:2, mgp=c(1.5, 0.6, 0), mar=c(.1+ c(4,3,2,1)),
cex.main=0.8)
plot(aa.a, which.plot = 2)
plot(aa.ga, which.plot = 2)
par(op)
## Show how "gaverage" is a "generalized average":
aa.ga.0 <- agnes(animals, method = "gaverage", par.method = 0)
stopifnot(all.equal(aa.ga.0[iC], aa.a[iC]))
data(votes.repub)
agn1 <- agnes(votes.repub, metric = "manhattan", stand = TRUE)
agn1
plot(agn1)
op <- par(mfrow=c(2,2))
agn2 <- agnes(daisy(votes.repub), diss = TRUE, method = "complete")
plot(agn2)
## alpha = 0.625 ==> beta = -1/4 is "recommended" by some
agnS <- agnes(votes.repub, method = "flexible", par.meth = 0.625)
plot(agnS)
par(op)
## "show" equivalence of three "flexible" special cases
d.vr <- daisy(votes.repub)
a.wgt <- agnes(d.vr, method = "weighted")
a.sing <- agnes(d.vr, method = "single")
a.comp <- agnes(d.vr, method = "complete")
iC <- -(6:7) # not using 'call' and 'method' for comparisons
stopifnot(
all.equal(a.wgt [iC], agnes(d.vr, method="flexible", par.method = 0.5)[iC]) ,
all.equal(a.sing[iC], agnes(d.vr, method="flex", par.method= c(.5,.5,0, -.5))[iC]),
all.equal(a.comp[iC], agnes(d.vr, method="flex", par.method= c(.5,.5,0, +.5))[iC]))
## Exploring the dendrogram structure
(d2 <- as.dendrogram(agn2)) # two main branches
d2[[1]] # the first branch
d2[[2]] # the 2nd one { 8 + 42 = 50 }
d2[[1]][[1]]# first sub-branch of branch 1 .. and shorter form
identical(d2[[c(1,1)]],
d2[[1]][[1]])
## a "textual picture" of the dendrogram :
agnes.object 7
str(d2)
data(agriculture)
## Plot similar to Figure 7 in ref
## Not run: plot(agnes(agriculture), ask = TRUE)
data(animals)
aa.a <- agnes(animals) # default method = "average"
aa.ga <- agnes(animals, method = "gaverage")
op <- par(mfcol=1:2, mgp=c(1.5, 0.6, 0), mar=c(.1+ c(4,3,2,1)),
cex.main=0.8)
plot(aa.a, which.plot = 2)
plot(aa.ga, which.plot = 2)
par(op)
## Show how "gaverage" is a "generalized average":
aa.ga.0 <- agnes(animals, method = "gaverage", par.method = 0)
stopifnot(all.equal(aa.ga.0[iC], aa.a[iC]))
data(votes.repub)
agn1 <- agnes(votes.repub, metric = "manhattan", stand = TRUE)
agn1
plot(agn1)
library(cluster)
data(votes.repub)
agn1 <- agnes(votes.repub, metric = "manhattan", stand = TRUE)
agn1
plot(agn1)
data(votes.repub)
agn1 <- agnes(votes.repub, metric = "manhattan", stand = TRUE)
agn1
op <- par(mfrow=c(2,2))
agn2 <- agnes(daisy(votes.repub), diss = TRUE, method = "complete")
plot(agn2)
agnS <- agnes(votes.repub, method = "flexible", par.meth = 0.625)
plot(agnS)
par(op)
d.vr <- daisy(votes.repub)
a.wgt <- agnes(d.vr, method = "weighted")
a.sing <- agnes(d.vr, method = "single")
a.comp <- agnes(d.vr, method = "complete")
iC <- -(6:7) # not using 'call' and 'method' for comparisons
stopifnot(
all.equal(a.wgt [iC], agnes(d.vr, method="flexible", par.method = 0.5)[iC]) ,
all.equal(a.sing[iC], agnes(d.vr, method="flex", par.method= c(.5,.5,0, -.5))[iC]),
all.equal(a.comp[iC], agnes(d.vr, method="flex", par.method= c(.5,.5,0, +.5))[iC]))
(d2 <- as.dendrogram(agn2)) # two main branches
d2[[2]] # the 2nd one { 8 + 42 = 50 }
d2[[1]][[1]]# first sub-branch of branch 1 .. and shorter form
identical(d2[[c(1,1)]],
d2[[1]][[1]])
data(votes.repub)
agn1 <- agnes(votes.repub, metric = "manhattan", stand = TRUE)
agn1
plot(agn1)
plot(agn2)
data(votes.repub)
dv <- diana(votes.repub, metric = "manhattan", stand = TRUE)
print(dv)
plot(dv)
